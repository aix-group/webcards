Database
========

The tool build in SQLite3 lightweight database. It is a single file database, so you can easily copy it to another machine. The database file is located in the folder as `db.sqlite3`. The file is zipped and it can 
be unzipped to see the content. You can use any SQLite3 client to open the database file such as this [SQLiteBrowser](https://sqlitebrowser.org/). This one and direct way to interact with database but only recommended for advanced users and as a last resort.
The other two ways to interact is using the Django ORM or the Django admin interface.

### Django ORM

The Django ORM is a Python API to interact with the database. You can use it to query the database and to insert new data. The Django ORM is a very powerful tool and it is recommended to use it if you want to interact with the database. You can use the Django shell to interact with the database. To start the Django shell, run the following command:

```bash
python manage.py shell
```

### Django admin interface

The Django admin interface is an autogenerated, built-in web interface that allows developers and administrators to interact with their database models. It provides CRUD operations (Create, Read, Update, Delete) on database records without having to write any additional code.

To access to  admin interface you need to create superuser. Use the following command inside folder where you have your manage.py file. 

.. code block:: bash

    python manage.py createsuperuser

After that you can access to admin interface on the following URL: `http://localhost:8000/admin/`. There you have to login with your superuser credentials. In the Admin page, you can make changes to the database. You can add new records, edit existing records, and delete records.
To be more specific:

- Modifying the fields and sections with all of the attributes (descriptions, helpers) 
- Checking the sessions and current number of session Ids in the database with their data
- Adding the new section and fields 

is possible. However if there is no available dataclasses in the core library adding new section and fields would not be meaningful. Otherwise a new logic has to be implemented to make us of the new sections.